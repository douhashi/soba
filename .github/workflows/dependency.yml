name: Dependency Management

on:
  schedule:
    - cron: '0 9 * * 1'  # Every Monday at 9:00 UTC
  workflow_dispatch:
  push:
    branches:
      - main
    paths:
      - 'go.mod'
      - 'go.sum'
  pull_request:
    paths:
      - 'go.mod'
      - 'go.sum'

permissions:
  contents: write
  security-events: write
  pull-requests: write

jobs:
  verify:
    name: Verify Dependencies
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Go
        uses: actions/setup-go@v5
        with:
          go-version: '1.23'
          cache: true

      - name: Verify module dependencies
        run: |
          go mod verify
          go mod download

      - name: Check for module tidiness
        run: |
          go mod tidy
          if [ -n "$(git status --porcelain go.mod go.sum)" ]; then
            echo "::error::go.mod or go.sum is not tidy. Please run 'go mod tidy' and commit the changes."
            git diff go.mod go.sum
            exit 1
          fi

      - name: List direct dependencies
        run: |
          echo "## Direct Dependencies" >> $GITHUB_STEP_SUMMARY
          echo '```' >> $GITHUB_STEP_SUMMARY
          go list -m all | grep -v "^github.com/douhashi/soba" | head -20 >> $GITHUB_STEP_SUMMARY
          echo '```' >> $GITHUB_STEP_SUMMARY

  security-scan:
    name: Security Vulnerability Scan
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Go
        uses: actions/setup-go@v5
        with:
          go-version: '1.23'
          cache: true

      - name: Run govulncheck
        run: |
          go install golang.org/x/vuln/cmd/govulncheck@latest
          govulncheck -json ./... | tee vulncheck.json

          # Parse and display results
          if [ -s vulncheck.json ]; then
            echo "## Security Scan Results" >> $GITHUB_STEP_SUMMARY
            echo "Security vulnerabilities found. Please review the output." >> $GITHUB_STEP_SUMMARY
            govulncheck ./...
          else
            echo "## âœ… Security Scan Passed" >> $GITHUB_STEP_SUMMARY
            echo "No known vulnerabilities detected." >> $GITHUB_STEP_SUMMARY
          fi

      - name: Nancy dependency scan
        run: |
          go install github.com/sonatype-nexus-community/nancy@latest
          go list -json -deps ./... | nancy sleuth

      - name: Run Trivy scan
        uses: aquasecurity/trivy-action@master
        with:
          scan-type: 'fs'
          scan-ref: 'go.mod'
          format: 'sarif'
          output: 'trivy-results.sarif'
          severity: 'MEDIUM,HIGH,CRITICAL'

      - name: Upload Trivy results
        uses: github/codeql-action/upload-sarif@v3
        if: always()
        with:
          sarif_file: 'trivy-results.sarif'

  update:
    name: Update Dependencies
    runs-on: ubuntu-latest
    if: github.event_name == 'schedule' || github.event_name == 'workflow_dispatch'

    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          token: ${{ secrets.GITHUB_TOKEN }}

      - name: Set up Go
        uses: actions/setup-go@v5
        with:
          go-version: '1.23'
          cache: true

      - name: Update dependencies
        id: update
        run: |
          # Store initial state
          cp go.mod go.mod.bak
          cp go.sum go.sum.bak

          # Update all dependencies
          go get -u -t ./...
          go mod tidy

          # Check if there are changes
          if [ -n "$(git status --porcelain go.mod go.sum)" ]; then
            echo "updates_available=true" >> $GITHUB_OUTPUT

            # Generate update report
            echo "## ðŸ“¦ Dependency Updates Available" > update_report.md
            echo "" >> update_report.md
            echo "The following dependencies can be updated:" >> update_report.md
            echo "" >> update_report.md
            echo '```diff' >> update_report.md
            git diff go.mod | grep -E "^\+\s" | head -20 >> update_report.md
            echo '```' >> update_report.md
          else
            echo "updates_available=false" >> $GITHUB_OUTPUT
            echo "All dependencies are up to date!" > update_report.md
          fi

      - name: Run tests after update
        if: steps.update.outputs.updates_available == 'true'
        run: |
          go test -race -short ./...
        continue-on-error: true

      - name: Create Pull Request
        if: steps.update.outputs.updates_available == 'true'
        uses: peter-evans/create-pull-request@v6
        with:
          token: ${{ secrets.GITHUB_TOKEN }}
          commit-message: 'chore(deps): update go dependencies'
          title: 'ðŸ”„ Update Go Dependencies'
          body-path: update_report.md
          branch: deps/update-go-dependencies
          delete-branch: true
          labels: |
            dependencies
            automated
          assignees: ${{ github.actor }}

  license-check:
    name: License Compliance Check
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Go
        uses: actions/setup-go@v5
        with:
          go-version: '1.23'
          cache: true

      - name: Install go-licenses
        run: go install github.com/google/go-licenses@latest

      - name: Check licenses
        run: |
          echo "## ðŸ“œ License Report" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY

          # Save licenses to file
          go-licenses save ./... --save_path=./licenses --force 2>/dev/null || true

          # Report licenses
          go-licenses report ./... --template='{{.LicenseName}}: {{.LicenseURL}}' 2>/dev/null | sort -u > license_report.txt || true

          if [ -f license_report.txt ]; then
            echo "### Detected Licenses:" >> $GITHUB_STEP_SUMMARY
            echo '```' >> $GITHUB_STEP_SUMMARY
            cat license_report.txt >> $GITHUB_STEP_SUMMARY
            echo '```' >> $GITHUB_STEP_SUMMARY
          fi

          # Check for forbidden licenses
          FORBIDDEN_LICENSES="GPL AGPL LGPL"
          for license in $FORBIDDEN_LICENSES; do
            if grep -q "$license" license_report.txt 2>/dev/null; then
              echo "::warning::Found potentially incompatible license: $license"
            fi
          done

      - name: Upload license report
        uses: actions/upload-artifact@v4
        if: always()
        with:
          name: license-report
          path: |
            license_report.txt
            licenses/
          retention-days: 30